==================================================
       GUÍA DIDÁCTICA: ListJuegos (React + PrimeReact)
==================================================
Este componente muestra una lista de juegos con CRUD completo.
Ideal para estudiantes que aprenden React, manejo de formularios,
validaciones, subida de archivos y comunicación con una API REST.

Funcionalidades:
- Listar juegos (DataTable)
- Ver detalles (Dialog)
- Agregar nuevo juego (con imagen)
- Editar juego (sin obligar a subir imagen nuevamente)
- Eliminar con confirmación (confirmDialog)
- Validaciones en frontend
- Uso de FormData para subir imágenes

--------------------------------------------------
1. IMPORTACIONES
--------------------------------------------------
Componentes de React, PrimeReact y utilidades.
Se incluye confirmDialog para confirmaciones seguras.
--------------------------------------------------
import { useEffect, useState, useRef } from "react";
import { DataTable } from 'primereact/datatable';
import { Column } from 'primereact/column';
import { Button } from 'primereact/button';
import { Dialog } from 'primereact/dialog';
import { Tag } from 'primereact/tag';
import { InputText } from 'primereact/inputtext';
import { Dropdown } from 'primereact/dropdown';
import { FilterMatchMode } from 'primereact/api';
import { formatearFecha } from "../../utils/utils";
import { confirmDialog } from 'primereact/confirmdialog'; 
import { ConfirmDialog } from 'primereact/confirmdialog'; 
import { Toast } from 'primereact/toast';

--------------------------------------------------
2. CONSTANTES DE API
--------------------------------------------------
Definimos las URLs del backend para consultas y acciones.
--------------------------------------------------
const API = 'http://localhost:3002/api/juegos';
const API_GENEROS = 'http://localhost:3002/api/generos';

--------------------------------------------------
3. COMPONENTE PRINCIPAL: ListJuegos
--------------------------------------------------
Hook useState para gestionar datos, formularios, errores y estado de diálogos.
Hook useRef para acceso a Toast y DataTable.
--------------------------------------------------

const ListJuegos = () => {
    const [datos, setDatos] = useState([]);
    const [generos, setGeneros] = useState([]);
    const [loading, setLoading] = useState(true);
    const [loadingGeneros, setLoadingGeneros] = useState(true);
    const [error, setError] = useState(null);
    const [visible, setVisible] = useState(false);
    const [selectedItem, setSelectedItem] = useState(null);
    const [editId, setEditId] = useState(null); // ID del juego que se está editando
    const [filters, setFilters] = useState({
        global: { value: null, matchMode: FilterMatchMode.CONTAINS }
    });
    const [visibleForm, setVisibleForm] = useState(false);
    const [formData, setFormData] = useState({
        nombre: '',
        descripcion: '',
        fechapublicacion: '',
        precio: '',
        valoracion: '',
        idgenero: '',
        idestatus: 1,
        imagen: '',           // nombre del archivo en BD
        imagenFile: null      // archivo seleccionado (no se guarda en BD)
    });
    const [formErrors, setFormErrors] = useState({});
    const toast = useRef(null);
    const dt = useRef(null);

--------------------------------------------------
4. FUNCIONES DE CARGA DE DATOS
--------------------------------------------------
getDatos(): Obtiene juegos del backend.
getGeneros(): Obtiene géneros para el Dropdown.
Ambos se llaman al montar el componente.
--------------------------------------------------
    const getDatos = async () => {
        try {
            const response = await fetch(API);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const data = await response.json();
            setDatos(data);
        } catch (err) {
            setError(err.message);
        } finally {
            setLoading(false);
        }
    };

    const getGeneros = async () => {
        try {
            const response = await fetch(API_GENEROS);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const data = await response.json();
            setGeneros(data);
        } catch (err) {
            setError(err.message);
        } finally {
            setLoadingGeneros(false);
        }
    };

    useEffect(() => {
        getDatos();
        getGeneros();
    }, []);

 --------------------------------------------------
5. ACCIONES DE LA TABLA
--------------------------------------------------
handleViewDetails: Muestra detalles en un diálogo.
actionBodyTemplate: Botones de acción (ver, eliminar, editar).
statusBodyTemplate: Muestra estado como etiqueta (Activo/Inactivo).
--------------------------------------------------  
    const handleViewDetails = (juego) => {
        setSelectedItem(juego);
        setVisible(true);
    };

    const actionBodyTemplate = (rowData) => {
        return (
            <div className="d-flex gap-2">
                <Button icon="pi pi-eye" className="p-button-rounded p-button-info"
                    onClick={() => handleViewDetails(rowData)} tooltip="Ver detalles" />
                <Button icon="pi pi-trash" className="p-button-rounded p-button-danger"
                    onClick={() => deleteJuego(rowData)} tooltip="Eliminar" />
                <Button icon="pi pi-pencil" className="p-button-rounded p-button-warning"
                    onClick={() => editJuego(rowData)} tooltip="Editar" />
            </div>
        );
    };

    const statusBodyTemplate = (rowData) => {
        return (
            <Tag value={rowData.idestatus === 1 ? 'Activo' : 'Inactivo'}
                severity={rowData.idestatus === 1 ? 'success' : 'danger'} />
        );
    };

--------------------------------------------------
6. DIÁLOGO DE CONFIRMACIÓN Y TOAST
--------------------------------------------------
modalFooter: Pie del diálogo de detalles.
onGlobalFilterChange: Filtrado en tiempo real.
--------------------------------------------------
    const modalFooter = (
        <Button label="Cerrar" icon="pi pi-times"
            onClick={() => setVisible(false)} className="p-button-text" />
    );

    const onGlobalFilterChange = (e) => {
        const value = e.target.value;
        let _filters = { ...filters };
        _filters['global'].value = value;
        setFilters(_filters);
    };

--------------------------------------------------
7. GESTIÓN DEL FORMULARIO
--------------------------------------------------
openNew: Reinicia el formulario para crear un nuevo juego.
onInputChange: Actualiza formData y limpia errores.
--------------------------------------------------
    const openNew = () => {
        setFormData({
            nombre: '',
            descripcion: '',
            fechapublicacion: '',
            precio: '',
            valoracion: '',
            idgenero: '',
            idestatus: 1,
            imagen: '',
            imagenFile: null
        });
        setEditId(null);
        setFormErrors({});
        setVisibleForm(true);
    };

    const onInputChange = (e, field) => {
        const value = e.target.value;
        setFormData(prev => ({ ...prev, [field]: value }));
        if (formErrors[field]) {
            setFormErrors(prev => ({ ...prev, [field]: null }));
        }
    };

--------------------------------------------------
8. VALIDACIÓN DE FORMULARIO
--------------------------------------------------
Valida todos los campos obligatorios:
- Nombre, precio, valoración, fecha, género, estado.
- Imagen: obligatoria solo al crear, no al editar si ya existe.
Muestra errores en tiempo real.
--------------------------------------------------
    const validate = () => {
        const errors = {};

        if (!formData.nombre || formData.nombre.trim() === '') {
            errors.nombre = 'El nombre es obligatorio.';
        }

        if (!formData.precio && formData.precio !== 0) {
            errors.precio = 'El precio es obligatorio.';
        } else {
            const precio = Number(formData.precio);
            if (isNaN(precio)) errors.precio = 'Debe ser un número.';
            else if (precio < 0) errors.precio = 'No puede ser negativo.';
            else if (precio > 500) errors.precio = 'No puede ser mayor a 500.';
        }

        if (!formData.valoracion && formData.valoracion !== 0) {
            errors.valoracion = 'La valoración es obligatoria.';
        } else {
            const valoracion = Number(formData.valoracion);
            if (isNaN(valoracion)) errors.valoracion = 'Debe ser un número.';
            else if (valoracion < 1 || valoracion > 10) errors.valoracion = 'Entre 1 y 10.';
        }

        if (!formData.fechapublicacion || formData.fechapublicacion.trim() === '') {
            errors.fechapublicacion = 'La fecha es obligatoria.';
        }

        if (!formData.idgenero && formData.idgenero !== 0) {
            errors.idgenero = 'Debe seleccionar un género.';
        } else if (isNaN(Number(formData.idgenero)) || Number(formData.idgenero) <= 0) {
            errors.idgenero = 'Debe ser un género válido.';
        }

        if (![1, 2].includes(Number(formData.idestatus))) {
            errors.idestatus = 'Debe seleccionar un estado válido.';
        }

        // Imagen: obligatoria solo al crear
        if (!editId && !formData.imagenFile) {
            errors.imagen = 'Debe seleccionar una imagen.';
        } else if (editId && !formData.imagenFile && !formData.imagen) {
            errors.imagen = 'El juego no tiene imagen.';
        }

        setFormErrors(errors);
        return Object.keys(errors).length === 0;
    };

--------------------------------------------------
9. GUARDAR JUEGO (Crear o Editar)
--------------------------------------------------
Usa FormData para enviar imagen.
Si hay editId → PUT (editar), si no → POST (crear).
Muestra notificación de éxito/error.
--------------------------------------------------
    const saveJuego = async () => {
        if (!validate()) return;
        try {
            const formDataToSend = new FormData();
            formDataToSend.append('nombre', formData.nombre.trim());
            if (formData.descripcion) formDataToSend.append('descripcion', formData.descripcion.trim());
            if (formData.fechapublicacion) formDataToSend.append('fechapublicacion', formData.fechapublicacion);
            if (formData.precio) formDataToSend.append('precio', formData.precio);
            if (formData.valoracion) formDataToSend.append('valoracion', formData.valoracion);
            formDataToSend.append('idgenero', formData.idgenero);
            formDataToSend.append('idestatus', formData.idestatus);
            if (formData.imagenFile) {
                formDataToSend.append('imagen', formData.imagenFile);
            }

            const isEdit = editId !== null;
            const url = isEdit ? `${API}/${editId}` : API;
            const method = isEdit ? 'PUT' : 'POST';

            const response = await fetch(url, { method, body: formDataToSend });
            const data = await response.json();

            if (!response.ok) throw new Error(data.error || `No se pudo ${isEdit ? 'actualizar' : 'crear'}`);

            setVisibleForm(false);
            getDatos();
            setEditId(null);
            toast.current.show({
                severity: 'success',
                summary: 'Éxito',
                detail: `Juego ${isEdit ? 'actualizado' : 'creado'} correctamente`,
                life: 3000
            });
        } catch (err) {
            toast.current.show({
                severity: 'error',
                summary: 'Error',
                detail: err.message,
                life: 5000
            });
        }
    };

--------------------------------------------------
10. CABECERA DE LA TABLA
--------------------------------------------------
renderHeader: Botón "Nuevo Juego" y buscador global.
--------------------------------------------------
    const renderHeader = () => {
        const value = filters['global'] ? filters['global'].value : '';
        return (
            <div className="d-flex justify-content-between align-items-center">
                <Button label="Nuevo Juego" icon="pi pi-plus" className="p-button-success" onClick={openNew} />
                <span className="p-input-icon-left mx-2">
                    <i className="pi pi-search" />
                    <InputText value={value || ''} onChange={onGlobalFilterChange} placeholder="Buscar..." className="w-100 px-4" />
                </span>
            </div>
        );
    };
    const header = renderHeader();

--------------------------------------------------
11. RENDERIZADO DE IMAGEN
--------------------------------------------------
imageBodyTemplate: Muestra la imagen del juego o una por defecto.
--------------------------------------------------
    const imageBodyTemplate = (rowData) => {
        const src = rowData.imagen
            ? `http://localhost:3002/uploads/juegos/img/${rowData.imagen}`
            : 'http://localhost:3002/uploads/juegos/img/noexiste.png';
        return (
            <img src={src} alt="Juego" width="50" style={{ borderRadius: '6px', border: '1px solid #ddd' }}
                onError={(e) => { e.target.src = 'http://localhost:3002/uploads/juegos/img/noexiste.png'; }} />
        );
    };

--------------------------------------------------
12. ELIMINAR JUEGO
--------------------------------------------------
deleteJuego: Usa confirmDialog para confirmar antes de eliminar.
--------------------------------------------------
    const deleteJuego = (juego) => {
        confirmDialog({
            message: `¿Eliminar el juego "${juego.njuego}"? Esta acción no se puede deshacer.`,
            header: 'Confirmar Eliminación',
            icon: 'pi pi-exclamation-triangle',
            acceptLabel: 'Sí, eliminar',
            rejectLabel: 'Cancelar',
            accept: async () => {
                try {
                    const response = await fetch(`${API}/${juego.idjuego}`, { method: 'DELETE' });
                    if (!response.ok) throw new Error('No se pudo eliminar');
                    getDatos();
                    toast.current.show({ severity: 'success', summary: 'Éxito', detail: 'Eliminado correctamente', life: 3000 });
                } catch (err) {
                    toast.current.show({ severity: 'error', summary: 'Error', detail: err.message, life: 5000 });
                }
            },
            reject: () => {
                toast.current.show({ severity: 'info', summary: 'Cancelado', detail: 'No se eliminó', life: 3000 });
            }
        });
    };

--------------------------------------------------
13. EDITAR JUEGO
--------------------------------------------------
editJuego: Carga los datos del juego en el formulario.
Permite editar sin obligar a subir imagen si no se cambia.
--------------------------------------------------
    const editJuego = (juego) => {
        setFormData({
            nombre: juego.njuego,
            descripcion: juego.djuego || '',
            fechapublicacion: juego.fechapublicacion ? juego.fechapublicacion.split('T')[0] : '',
            precio: juego.precio !== null ? juego.precio : '',
            valoracion: juego.valoracion !== null ? juego.valoracion : '',
            idgenero: juego.idgenero,
            idestatus: Number(juego.idestatus),
            imagen: juego.imagen || '',
            imagenFile: null
        });
        setEditId(juego.idjuego);
        setFormErrors({});
        setVisibleForm(true);
    };

--------------------------------------------------
14. RENDER FINAL
--------------------------------------------------
Renderiza:
- Toast y ConfirmDialog
- Tabla con acciones
- Diálogo de detalles
- Diálogo de formulario (dinámico: "Agregar" o "Editar")
Muestra carga o error si aplica.
--------------------------------------------------
    if (loading || loadingGeneros) {
        return (
            <div className="text-center py-5">
                <div className="spinner-border text-primary" role="status"></div>
                <p>Cargando datos...</p>
            </div>
        );
    }

    if (error) {
        return (
            <div className="text-center py-5 text-danger">
                <h4>Error</h4>
                <p>{error}</p>
            </div>
        );
    }

    return (
        <div className="container">
            <Toast ref={toast} />
            <ConfirmDialog />

            <h4 className="text-center py-4">Lista de Juegos</h4>
            <div className="card">
                <DataTable
                    ref={dt}
                    value={datos}
                    paginator rows={10}
                    rowsPerPageOptions={[5, 10, 25]}
                    dataKey="idjuego"
                    emptyMessage="No se encontraron juegos."
                    filters={filters}
                    globalFilterFields={['njuego', 'ngenero']}
                    header={header}
                >
                    <Column field="idjuego" header="ID" sortable className="text-center" />
                    <Column header="Imagen" body={imageBodyTemplate} style={{ width: '8%' }} className="text-center" />
                    <Column field="ngenero" header="Género" sortable className="text-center" />
                    <Column field="njuego" header="Nombre" sortable />
                    <Column field="precio" header="Precio" sortable className="text-center" />
                    <Column field="valoracion" header="Valoración" sortable className="text-center" />
                    <Column field="idestatus" header="Estado" body={statusBodyTemplate} sortable className="text-center" />
                    <Column header="Acciones" body={actionBodyTemplate} className="text-center" />
                </DataTable>
            </div>

            {/* Diálogo de detalles */}
            <Dialog visible={visible} style={{ width: '900px' }} breakpoints={{ '1199px': '90%', '767px': '95%' }}
                header="Detalles del Juego" modal footer={modalFooter} onHide={() => setVisible(false)}>
                {selectedItem && (
                    <div className="card p-4">
                        <div className="row">
                            <div className="col-md-4">
                                <img src={selectedItem.imagen ? `http://localhost:3002/uploads/juegos/img/${selectedItem.imagen}` : 'http://localhost:3002/uploads/juegos/img/noexiste.png'}
                                    alt={selectedItem.njuego} width="100%" style={{ borderRadius: '6px', objectFit: 'cover', border: '1px solid #ddd' }}
                                    onError={(e) => { e.target.src = 'http://localhost:3002/uploads/juegos/img/noexiste.png'; }} />
                            </div>
                            <div className="col-md-8">
                                <h4><strong>ID:</strong> {selectedItem.idjuego}</h4>
                                <h5><strong>Género:</strong> {selectedItem.ngenero}</h5>
                                <h5><strong>Juego:</strong> {selectedItem.njuego}</h5>
                                <h5><strong>Precio:</strong> {selectedItem.precio}</h5>
                                <h5><strong>Lanzamiento:</strong> {formatearFecha(selectedItem.fechapublicacion)}</h5>
                                <h6><strong>Descripción:</strong> {selectedItem.djuego}</h6>
                                <div><strong>Estado:</strong> <Tag value={selectedItem.idestatus === 1 ? 'Activo' : 'Inactivo'} severity={selectedItem.idestatus === 1 ? 'success' : 'danger'} /></div>
                            </div>
                        </div>
                    </div>
                )}
            </Dialog>

            {/* Diálogo de formulario */}
            <Dialog visible={visibleForm} style={{ width: '500px' }}
                header={editId ? 'Editar Juego' : 'Agregar Juego'}
                modal className="p-fluid"
                footer={
                    <div>
                        <Button label="Cancelar" icon="pi pi-times" onClick={() => setVisibleForm(false)} className="p-button-text" />
                        <Button label="Guardar" icon="pi pi-check" onClick={saveJuego} />
                    </div>
                }
                onHide={() => setVisibleForm(false)}
            >
                {/* Formulario con validación */}
                <div className="field">
                    <label htmlFor="nombre">Nombre *</label>
                    <InputText id="nombre" value={formData.nombre} onChange={(e) => onInputChange(e, 'nombre')} autoFocus className={formErrors.nombre ? 'p-invalid' : ''} />
                    {formErrors.nombre && <small className="p-error">{formErrors.nombre}</small>}
                </div>
                <div className="field">
                    <label htmlFor="descripcion">Descripción</label>
                    <InputText id="descripcion" value={formData.descripcion} onChange={(e) => onInputChange(e, 'descripcion')} />
                </div>
                <div className="field">
                    <label htmlFor="fechapublicacion">Fecha de Publicación *</label>
                    <InputText id="fechapublicacion" type="date" value={formData.fechapublicacion} onChange={(e) => onInputChange(e, 'fechapublicacion')} className={formErrors.fechapublicacion ? 'p-invalid' : ''} />
                    {formErrors.fechapublicacion && <small className="p-error">{formErrors.fechapublicacion}</small>}
                </div>
                <div className="field">
                    <label htmlFor="precio">Precio *</label>
                    <InputText id="precio" type="number" step="0.01" value={formData.precio} onChange={(e) => onInputChange(e, 'precio')} className={formErrors.precio ? 'p-invalid' : ''} />
                    {formErrors.precio && <small className="p-error">{formErrors.precio}</small>}
                </div>
                <div className="field">
                    <label htmlFor="valoracion">Valoración (1-10) *</label>
                    <InputText id="valoracion" type="number" min="1" max="10" value={formData.valoracion} onChange={(e) => onInputChange(e, 'valoracion')} className={formErrors.valoracion ? 'p-invalid' : ''} />
                    {formErrors.valoracion && <small className="p-error">{formErrors.valoracion}</small>}
                </div>
                <div className="field">
                    <label htmlFor="idgenero">Género *</label>
                    <Dropdown id="idgenero" value={formData.idgenero} options={generos} optionValue="idgenero" optionLabel="nombre"
                        placeholder="Selecciona un género" onChange={(e) => setFormData(prev => ({ ...prev, idgenero: e.value }))}
                        className={formErrors.idgenero ? 'p-invalid' : ''} />
                    {formErrors.idgenero && <small className="p-error">{formErrors.idgenero}</small>}
                </div>
                <div className="field">
                    <label htmlFor="imagenFile">Imagen del Juego *</label>
                    <input type="file" accept="image/*" className={`form-control ${formErrors.imagen ? 'is-invalid' : ''}`}
                        onChange={(e) => {
                            const file = e.target.files[0];
                            setFormData(prev => ({ ...prev, imagenFile: file }));
                            if (formErrors.imagen) setFormErrors(prev => ({ ...prev, imagen: null }));
                        }} />
                    {formErrors.imagen && <small className="p-error">{formErrors.imagen}</small>}
                    {editId && formData.imagen && (
                        <div className="mt-2">
                            <label>Imagen Actual</label>
                            <img src={`http://localhost:3002/uploads/juegos/img/${formData.imagen}`} alt="Actual" width="100" style={{ borderRadius: '6px' }} />
                        </div>
                    )}
                </div>
                <div className="field">
                    <label>Estado</label>
                    <div className="form-check">
                        <input type="radio" id="activo" name="idestatus" value="1" checked={formData.idestatus === 1} onChange={() => setFormData(prev => ({ ...prev, idestatus: 1 }))} className="form-check-input" />
                        <label htmlFor="activo" className="form-check-label mx-2">Activo</label>
                    </div>
                    <div className="form-check">
                        <input type="radio" id="inactivo" name="idestatus" value="2" checked={formData.idestatus === 2} onChange={() => setFormData(prev => ({ ...prev, idestatus: 2 }))} className="form-check-input" />
                        <label htmlFor="inactivo" className="form-check-label mx-2">Inactivo</label>
                    </div>
                    {formErrors.idestatus && <small className="p-error">{formErrors.idestatus}</small>}
                </div>
            </Dialog>
        </div>
    );
};

export default ListJuegos;




siguiente etapa

CREATE TABLE IF NOT EXISTS usuarios (
    idusuario INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL, -- Debe estar encriptado (bcrypt)
    rol ENUM('cliente', 'admin') DEFAULT 'cliente',
    fechacreacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    activo TINYINT(1) DEFAULT 1
);

-- -----------------------------------------------------
-- NUEVA Tabla: carrito
-- -----------------------------------------------------
-- Almacena los juegos que un usuario quiere comprar
CREATE TABLE IF NOT EXISTS carrito (
    idcarrito INT AUTO_INCREMENT PRIMARY KEY,
    idusuario INT NOT NULL,
    idjuego INT NOT NULL,
    cantidad INT DEFAULT 1 CHECK (cantidad > 0),
    fechacreacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (idusuario) REFERENCES usuarios(idusuario) ON DELETE CASCADE,
    FOREIGN KEY (idjuego) REFERENCES juegos(idjuego) ON DELETE CASCADE,
    UNIQUE KEY unique_item_per_user (idusuario, idjuego) -- Evita duplicados
);

-- -----------------------------------------------------
-- NUEVA Tabla: pedidos
-- -----------------------------------------------------
-- Cada compra genera un pedido
CREATE TABLE IF NOT EXISTS pedidos (
    idpedido INT AUTO_INCREMENT PRIMARY KEY,
    idusuario INT NOT NULL,
    total DECIMAL(10,2) NOT NULL,
    estado ENUM('pendiente', 'completado', 'cancelado') DEFAULT 'pendiente',
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (idusuario) REFERENCES usuarios(idusuario) ON DELETE CASCADE
);

-- -----------------------------------------------------
-- NUEVA Tabla: detalle_pedido
-- -----------------------------------------------------
-- Detalle de qué juegos se compraron en cada pedido
CREATE TABLE IF NOT EXISTS detalle_pedido (
    iddetalle INT AUTO_INCREMENT PRIMARY KEY,
    idpedido INT NOT NULL,
    idjuego INT NOT NULL,
    cantidad INT NOT NULL CHECK (cantidad > 0),
    precio DECIMAL(10,2) NOT NULL, -- Precio al momento de la compra
    FOREIGN KEY (idpedido) REFERENCES pedidos(idpedido) ON DELETE CASCADE,
    FOREIGN KEY (idjuego) REFERENCES juegos(idjuego) ON DELETE CASCADE
);

-- -----------------------------------------------------
-- NUEVA Tabla: metodos_pago
-- -----------------------------------------------------
-- Métodos de pago disponibles
CREATE TABLE IF NOT EXISTS metodos_pago (
    idmetodo INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL -- Ej: Tarjeta, PayPal, Efectivo
);

-- Insertar métodos comunes
INSERT IGNORE INTO metodos_pago (idmetodo, nombre) VALUES 
(1, 'Tarjeta de Crédito'),
(2, 'PayPal'),
(3, 'Transferencia Bancaria');

-- -----------------------------------------------------
-- NUEVA Tabla: pagos
-- -----------------------------------------------------
-- Registro de pagos realizados por pedido
CREATE TABLE IF NOT EXISTS pagos (
    idpago INT AUTO_INCREMENT PRIMARY KEY,
    idpedido INT NOT NULL,
    idmetodo INT NOT NULL,
    monto DECIMAL(10,2) NOT NULL,
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    estado ENUM('éxito', 'fallido', 'pendiente') DEFAULT 'pendiente',
    FOREIGN KEY (idpedido) REFERENCES pedidos(idpedido) ON DELETE CASCADE,
    FOREIGN KEY (idmetodo) REFERENCES metodos_pago(idmetodo)
);


agregar los datos a usuarios
-- -----------------------------------------------------
-- Insertar 20 usuarios: 18 clientes y 2 administradores
-- -----------------------------------------------------

-- NOTA: Las contraseñas están encriptadas con bcrypt.
-- Contraseña de ejemplo: "12345678" → hash generado con bcrypt (cost 10)
-- Puedes generar tus propios hashes en: https://bcrypt-generator.com/

-- Contraseña común: "12345678"
-- Hash generado: $2b$10$E6zGxM3Z7Z0eJtq.sv3p7uQ7i0Y9X1a2b3c4d5e6f7g8h9i0j1k2l3m4

SET @password_hash = '$2b$10$E6zGxM3Z7Z0eJtq.sv3p7uQ7i0Y9X1a2b3c4d5e6f7g8h9i0j1k2l3m4';

-- --------------------------
-- 2 ADMINISTRADORES
-- --------------------------
INSERT INTO usuarios (nombre, email, password, rol, activo) VALUES
('Ana García', 'ana.garcia@admin.com', @password_hash, 'admin', 1),
('Carlos Mendoza', 'carlos.mendoza@admin.com', @password_hash, 'admin', 1);

-- --------------------------
-- 18 CLIENTES
-- --------------------------
INSERT INTO usuarios (nombre, email, password, rol, activo) VALUES
('Luis Pérez', 'luis.perez@cliente.com', @password_hash, 'cliente', 1),
('María López', 'maria.lopez@cliente.com', @password_hash, 'cliente', 1),
('Jorge Ramírez', 'jorge.ramirez@cliente.com', @password_hash, 'cliente', 1),
('Sofía Torres', 'sofia.torres@cliente.com', @password_hash, 'cliente', 1),
('Diego Fernández', 'diego.fernandez@cliente.com', @password_hash, 'cliente', 1),
('Valentina Díaz', 'valentina.diaz@cliente.com', @password_hash, 'cliente', 1),
('Andrés Castro', 'andres.castro@cliente.com', @password_hash, 'cliente', 1),
('Camila Ruiz', 'camila.ruiz@cliente.com', @password_hash, 'cliente', 1),
('Felipe Ortega', 'felipe.ortega@cliente.com', @password_hash, 'cliente', 1),
('Lucía Méndez', 'lucia.mendez@cliente.com', @password_hash, 'cliente', 1),
('Mateo Silva', 'mateo.silva@cliente.com', @password_hash, 'cliente', 1),
('Isabella Vargas', 'isabella.vargas@cliente.com', @password_hash, 'cliente', 1),
('Nicolás Paredes', 'nicolas.paredes@cliente.com', @password_hash, 'cliente', 1),
('Emilia Navarro', 'emilia.navarro@cliente.com', @password_hash, 'cliente', 1),
('Tomás Jiménez', 'tomas.jimenez@cliente.com', @password_hash, 'cliente', 1),
('Antonella Rojas', 'antonella.rojas@cliente.com', @password_hash, 'cliente', 1),
('Sebastián Castro', 'sebastian.castro@cliente.com', @password_hash, 'cliente', 1),
('Renata Soto', 'renata.soto@cliente.com', @password_hash, 'cliente', 1);

INSERT IGNORE INTO metodos_pago (idmetodo, nombre) VALUES 
(1, 'Tarjeta de Crédito'),
(2, 'PayPal'),
(3, 'Transferencia Bancaria');

-- Supongamos que los idjuego de tus juegos son: 1 al 10
-- Y los idusuario de clientes: 1 al 18 (los primeros 18 registros)

INSERT INTO pedidos (idusuario, total, estado, fecha) VALUES
(1, 59.99, 'completado', '2024-06-01 10:30:00'),
(3, 129.98, 'completado', '2024-06-02 14:20:00'),
(5, 69.99, 'completado', '2024-06-03 16:45:00'),
(2, 59.99, 'completado', '2024-06-04 09:15:00'),
(7, 119.98, 'completado', '2024-06-05 11:00:00'),
(4, 69.99, 'completado', '2024-06-06 13:30:00'),
(9, 59.99, 'completado', '2024-06-07 17:20:00'),
(6, 129.98, 'completado', '2024-06-08 10:00:00'),
(8, 69.99, 'completado', '2024-06-09 15:45:00'),
(10, 59.99, 'completado', '2024-06-10 08:30:00'),
(12, 119.98, 'completado', '2024-06-11 12:15:00'),
(11, 69.99, 'completado', '2024-06-12 14:00:00'),
(14, 59.99, 'completado', '2024-06-13 16:30:00'),
(13, 129.98, 'completado', '2024-06-14 09:45:00'),
(15, 69.99, 'completado', '2024-06-15 13:20:00');

-- Detalles del pedido 1
INSERT INTO detalle_pedido (idpedido, idjuego, cantidad, precio) VALUES
(1, 1, 1, 59.99); -- Zelda

-- Pedido 2
INSERT INTO detalle_pedido (idpedido, idjuego, cantidad, precio) VALUES
(2, 4, 1, 69.99), -- Call of Duty
(2, 5, 1, 59.99); -- Civilization VI

-- Pedido 3
INSERT INTO detalle_pedido (idpedido, idjuego, cantidad, precio) VALUES
(3, 2, 1, 69.99); -- FIFA 24

-- Pedido 4
INSERT INTO detalle_pedido (idpedido, idjuego, cantidad, precio) VALUES
(4, 3, 1, 59.99); -- Cyberpunk

-- Pedido 5
INSERT INTO detalle_pedido (idpedido, idjuego, cantidad, precio) VALUES
(5, 4, 1, 69.99),
(5, 1, 1, 59.99);

-- Pedido 6
INSERT INTO detalle_pedido (idpedido, idjuego, cantidad, precio) VALUES
(6, 2, 1, 69.99);

-- Pedido 7
INSERT INTO detalle_pedido (idpedido, idjuego, cantidad, precio) VALUES
(7, 6, 1, 59.99); -- Super Mario Odyssey

-- Pedido 8
INSERT INTO detalle_pedido (idpedido, idjuego, cantidad, precio) VALUES
(8, 4, 1, 69.99),
(8, 3, 1, 59.99);

-- Pedido 9
INSERT INTO detalle_pedido (idpedido, idjuego, cantidad, precio) VALUES
(9, 2, 1, 69.99);

-- Pedido 10
INSERT INTO detalle_pedido (idpedido, idjuego, cantidad, precio) VALUES
(10, 5, 1, 59.99);

-- Pedido 11
INSERT INTO detalle_pedido (idpedido, idjuego, cantidad, precio) VALUES
(11, 1, 1, 59.99),
(11, 4, 1, 69.99);

-- Pedido 12
INSERT INTO detalle_pedido (idpedido, idjuego, cantidad, precio) VALUES
(12, 2, 1, 69.99);

-- Pedido 13
INSERT INTO detalle_pedido (idpedido, idjuego, cantidad, precio) VALUES
(13, 7, 1, 59.99); -- The Witcher 3

-- Pedido 14
INSERT INTO detalle_pedido (idpedido, idjuego, cantidad, precio) VALUES
(14, 4, 1, 69.99),
(14, 5, 1, 59.99);

-- Pedido 15
INSERT INTO detalle_pedido (idpedido, idjuego, cantidad, precio) VALUES
(15, 2, 1, 69.99);

INSERT INTO pagos (idpedido, idmetodo, monto, estado, fecha) VALUES
(1, 1, 59.99, 'éxito', '2024-06-01 10:35:00'),
(2, 2, 129.98, 'éxito', '2024-06-02 14:25:00'),
(3, 1, 69.99, 'éxito', '2024-06-03 16:50:00'),
(4, 3, 59.99, 'éxito', '2024-06-04 09:20:00'),
(5, 1, 119.98, 'éxito', '2024-06-05 11:05:00'),
(6, 2, 69.99, 'éxito', '2024-06-06 13:35:00'),
(7, 1, 59.99, 'éxito', '2024-06-07 17:25:00'),
(8, 3, 129.98, 'éxito', '2024-06-08 10:05:00'),
(9, 1, 69.99, 'éxito', '2024-06-09 15:50:00'),
(10, 2, 59.99, 'éxito', '2024-06-10 08:35:00'),
(11, 1, 119.98, 'éxito', '2024-06-11 12:20:00'),
(12, 3, 69.99, 'éxito', '2024-06-12 14:05:00'),
(13, 1, 59.99, 'éxito', '2024-06-13 16:35:00'),
(14, 2, 129.98, 'éxito', '2024-06-14 09:50:00'),
(15, 1, 69.99, 'éxito', '2024-06-15 13:25:00');

INSERT INTO carrito (idusuario, idjuego, cantidad, fechacreacion) VALUES
(1, 2, 1, NOW()), -- FIFA 24
(1, 3, 1, NOW()), -- Cyberpunk
(3, 5, 1, NOW()), -- Civilization VI
(7, 1, 2, NOW()), -- Zelda x2
(10, 4, 1, NOW()), -- Call of Duty
(12, 6, 1, NOW()); -- Super Mario Odyssey
